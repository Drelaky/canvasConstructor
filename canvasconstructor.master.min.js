!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CanvasConstructor=t():e.CanvasConstructor=t()}(window,function(){return function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){e.exports=Object.assign(o(1),{Canvas:o(!function(){var e=new Error("Cannot find module './src/canvas'");throw e.code="MODULE_NOT_FOUND",e}())})},function(e,t){t.invert=(e=>e.save().setGlobalCompositeOperation("difference").setColor("white").addRect(0,0,e.width,e.height).restore()),t.greyscale=t.grayscale=(e=>e.save().setGlobalCompositeOperation("hsl-saturation").setColor("white").addRect(0,0,e.width,e.height).restore()),t.invertGreyscale=t.invertGrayscale=(e=>e.save().setGlobalCompositeOperation("hsl-saturation").setColor("white").addRect(0,0,e.width,e.height).setGlobalCompositeOperation("difference").setColor("white").addRect(0,0,e.width,e.height).restore()),t.sepia=(e=>{const t=e.getImageData(),{data:o}=t;for(let e=0;e<o.length;e+=4){const t=o[e],r=o[e+1],n=o[e+2];o[e]=.393*t+.769*r+.189*n,o[e+1]=.349*t+.686*r+.168*n,o[e+2]=.272*t+.534*r+.131*n}return e.putImageData(t,0,0)}),t.silhouette=(e=>{const t=e.getImageData(),{data:o}=t;for(let e=0;e<o.length;e+=4)o[e]=o[e+1]=o[e+2]=0;return e.putImageData(t,0,0)}),t.threshold=((e,t)=>{const o=e.getImageData(),{data:r}=o;for(let e=0;e<r.length;e+=4)r[e]=r[e+1]=r[e+2]=.2126*r[e]+.7152*r[e+1]+.0722*r[e+2]>=t?255:0;return e.putImageData(o,0,0)}),t.invertedThreshold=((e,t)=>{const o=e.getImageData(),{data:r}=o;for(let e=0;e<r.length;e+=4)r[e]=r[e+1]=r[e+2]=.2126*r[e]+.7152*r[e+1]+.0722*r[e+2]>=t?0:255;return e.putImageData(o,0,0)}),t.brightness=((e,t)=>e.save().setGlobalAlpha(t/100).setColor("white").addRect(0,0,e.width,e.height).restore()),t.darkness=t.myOldFriend=((e,t)=>e.save().setGlobalAlpha(t/100).setColor("black").addRect(0,0,e.width,e.height).restore()),t.sharpen=((e,[o,r])=>t.convolute(e,[0,o,0,o,r,o,0,o,0])),t.blur=((e,o)=>t.convolute(e,new Array(9).fill(1/o))),t.convolute=((e,t)=>{const o=e.getImageData(),{data:r}=o,{width:n,height:a}=e;for(let e=0;e<a;e++)for(let o=0;o<n;o++){const i=4*(e*n+o);let l=0,s=0,u=0;for(let i=0;i<3;i++)for(let c=0;c<3;c++){const d=e+i-1,f=o+c-1;if(d<0||d>=a||f<0||f>=n)continue;const h=4*(d*n+f),p=t[3*i+c];l+=r[h]*p,s+=r[h+1]*p,u+=r[h+2]*p}r[i]=l,r[i+1]=s,r[i+2]=u}return e.putImageData(o,0,0)})}])});